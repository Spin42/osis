# -*- coding: utf-8 -*-
# Generated by Django 1.9 on 2016-11-24 14:01
from __future__ import unicode_literals

from django.db import migrations
from base.models import academic_year
from base.models import offer_year
from base.models.program_manager import ProgramManager

origin_year = 2015
destination_year = 2016


def copy_score_sheet_address(apps, schema_editor):
    old_offer_years = _offer_years_by_acronym(origin_year)
    new_offer_years = list(_find_offer_years(destination_year))
    for new_offer in new_offer_years:
        _update_address(new_offer, old_offer_years)


def _offer_years_by_acronym(year):
    offer_years = list(_find_offer_years(year).values())
    return {off['acronym']: off for off in offer_years}


def _find_offer_years(year):
    ac_year = academic_year.find_academic_year_by_year(year)
    offer_years = offer_year.find_by_academic_year(ac_year)
    return offer_years


def _update_address(new_offer, old_offer_years):
    old_offer = old_offer_years.get(new_offer.acronym)
    if old_offer:
        _copy_address_fields_from_old_to_new_offer(old_offer, new_offer)
        new_offer.save()


def _copy_address_fields_from_old_to_new_offer(old_offer, new_offer):
    new_offer.recipient = old_offer.get('recipient')
    new_offer.location = old_offer.get('location')
    new_offer.postal_code = old_offer.get('postal_code')
    new_offer.city = old_offer.get('city')
    new_offer.country_id = old_offer.get('country_id')
    new_offer.phone = old_offer.get('phone')
    new_offer.fax = old_offer.get('fax')
    new_offer.email = old_offer.get('email')


def copy_program_managers(apps, schema_editor):
    pgm_managers = _find_program_managers()
    new_offer_years = _offer_years_by_acronym(destination_year)
    for manager in pgm_managers:
        _create_new_manager(manager, new_offer_years)


def _find_program_managers():
    return list(ProgramManager.objects.filter(offer_year__academic_year__year=origin_year)
                .select_related("offer_year")
                .select_related("person"))


def _create_new_manager(manager, new_offer_years):
    new_offer_year = new_offer_years.get(manager.offer_year.acronym)
    if new_offer_year and not _program_manager_exists(new_offer_year, manager.person):
        new_manager = ProgramManager(person=manager.person,
                                     offer_year_id=new_offer_year['id'])
        new_manager.save()


def _program_manager_exists(new_offer_year, person):
    return ProgramManager.objects.filter(offer_year_id=new_offer_year['id']) \
                                 .filter(person=person) \
                                 .exists()


class Migration(migrations.Migration):

    dependencies = [
        ('base', '0078_offeryear_mail'),
    ]

    operations = [
        migrations.RunPython(copy_program_managers),
        migrations.RunPython(copy_score_sheet_address),
    ]
